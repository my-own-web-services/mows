{{- $config :=  yamlFile "../../config.yml" -}}
{{- $filezWebHostname := joindomain $config.filez.web.publicHostname.subdomain (ternary "localhost" $config.filez.web.publicHostname.domain (eq $config.routing "local")) -}}
variablePrefix: "$"

serviceId: filez

storage:
    {{- range $key, $value := $config.filez.storage }}
    {{ $key }}:
        path: /storage/{{ $key }}/
        defaultUserLimits:
            maxStorage: {{ $value.defaultUserLimits.maxStorage }}
            maxFiles: {{ $value.defaultUserLimits.maxFiles }}
            maxBandwidth: {{ $value.defaultUserLimits.maxBandwidth }}
    {{- end }}



defaultStorage: {{ $config.filez.defaultStorage }}

appStorage:
    path: /appdata/

http:
    internalAddress: "[::]:80"

db:
    url: mongodb://root:$MONGODB_ROOT_PASSWORD@filez-db.localhost:{{ $config.filez.server.db.port }}

interossea:
    url: http://$INTEROSSEA_INTERNAL_URL
    assertionValiditySeconds: 600

dev:
    {{- range $key, $value := $config.filez.server.dev }}
    {{ $key }}: {{ $value }}
    {{- end }}
    mockUserPath: /.dev/mock_users.yml
    

constraints:
    maxFileSize: 10000000000 # 10 GB
    otherMaxBodySize: 1000000 # 1 MB TODO need to be implemented with hyper body to bytes with limit

services:
    - id: filez
      allowedOrigins: [{{ ternary "https://" "http://" $config.tls true }}{{ $filezWebHostname}}]
    {{- range $config.additionalAllowedApps }}
    - id: {{ .id }}
      allowedOrigins:
        {{- range .allowedOrigins }}
        - {{ . }}
        {{- end }}
    {{- end }}
    


readonlyMounts:
    {{- range $config.filez.readonlyMounts }}
    {{ .name }}:
        path: /readonly/{{ .name }}/
        rescanSeconds: 120
        ownerEmail: {{ .ownerEmail }}
    {{- end }}


users:
    makeAdmin: 
        {{- range $config.filez.server.users.makeAdmin }}
        - {{ . }}
        {{- end }}
    create:
        {{- range $config.filez.server.users.create }}
        - {{ . }}
        {{- end }}
    allowNew: {{ $config.filez.server.users.allowNew }}
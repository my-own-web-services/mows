{{- $config :=  yamlFile "../config.yml" -}}

version: "3.9"
services:
    filez-server:
        {{- if eq $config.server.build.enabled true }}
        build:
            context: {{ $config.server.build.path }}
            dockerfile: {{ $config.server.build.dockerfile }}
        {{- else }}
        image: firstdorsal/filez-server
        {{- end }}
        container_name: filez-server
        volumes:
            - ../config/server.yml:/config.yml:ro
            - filez-storage:/storage:rw
            {{- range $config.addons }}
            {{- if eq .storage true }}
            - filez-addons-{{.name}}:/appdata/{{.name}}:ro
            {{- end }}
            {{- end }}
        restart: always
        networks:
            - filez-server-db
            - {{ $config.reverseProxyNetwork }}
            {{- if eq $config.interossea.server.create true }}
            - interossea-server
            {{- end }}
        environment:
            MONGO_INITDB_ROOT_PASSWORD: $MONGO_INITDB_ROOT_PASSWORD_FILEZ
            INTEROSSEA_INTERNAL_URL: {{ $config.interossea.server.internalHostname }}
        labels:
            traefik:
                enabled: true
                http:
                    routers:
                        filez-server:
                            rule: "Host(`{{ $config.hostname }}`) && PathPrefix(`/api`)"
                            entrypoints: {{ $config.entrypoint }}
                            service: filez-server
                            tls: {{ $config.tls }}
                    services:
                        filez-server:
                            loadBalancer:
                                servers:
                                    - url: "http://filez-server:80"
    filez-web:
        {{- if eq $config.web.build.enabled true }}
        build:
            context: {{ $config.web.build.path }}
            dockerfile: {{ $config.web.build.dockerfile }}
        {{- else }}
        image: firstdorsal/filez-web
        {{- end }}
        container_name: filez-web
        volumes:
            - ../config/filez-web.yml:/config.yml:ro
        restart: always
        environment:
            CSP_CONNECT_SRC: {{ ternary "https://" "http://" $config.interossea.server.tls true }}{{ $config.interossea.server.publicHostname}}
        networks:
            - {{ $config.reverseProxyNetwork }}
        labels:
            traefik:
                enabled: true
                http:
                    routers:
                        filez-web:
                            rule: "Host(`{{ $config.hostname }}`) && PathPrefix(`/`)"
                            entrypoints: {{ $config.entrypoint }}
                            service: filez-web
                            tls: {{ $config.tls }}
                    services:
                        filez-web:
                            loadBalancer:
                                servers:
                                    - url: "http://filez-web:80"
    {{- range $config.addons }}
    filez-addons-{{.name}}:
        {{- if eq .build.enabled true }}
        build:
            context: {{.build.path}}
            dockerfile: {{.build.dockerfile}}
        {{- else }}
        image: {{.image}}
        {{- end }}
        container_name: filez-addons-{{.name}}
        volumes:
            - ../config/{{.name}}.yml:/config.yml:ro
            {{- if eq .filezAccess true }}
            - filez-storage:/storage:ro
            {{- end }}
            {{- if eq .storage true }}
            - filez-addons-{{.name}}:/storage:rw
            {{- end }}
        restart: always
        {{- if eq .db true }}
        environment:
            MONGO_INITDB_ROOT_PASSWORD: $MONGO_INITDB_ROOT_PASSWORD_FILEZ
        networks:
            - filez-addons-{{.name}}-db
        {{- end }}
    {{- end }}
    filezdb:
        build:
            context: ../../db/
            dockerfile: Dockerfile
        restart: always
        container_name: filezdb
        volumes:
            - filez-db:/data/:rw
        environment:
            MONGO_INITDB_ROOT_USERNAME: root
            MONGO_INITDB_ROOT_PASSWORD: $MONGO_INITDB_ROOT_PASSWORD_FILEZ
        healthcheck:
            test: |
                test $$(mongosh --quiet -u root -p $MONGO_INITDB_ROOT_PASSWORD_FILEZ --eval "try { rs.initiate({ _id: 'rs0', members: [{ _id: 0, host: 'filezdb' }] }).ok } catch (_) { rs.status().ok }") -eq 1
            interval: 10s
            start_period: 10s
        networks:
            - filez-server-db
            {{- range $config.addons }}
            {{- if eq .db true }}
            - filez-addons-{{ .name }}-db
            {{- end }}
            {{- end }}

    {{- if eq $config.interossea.web.create true }}
    interossea-web:
        {{- if eq $config.interossea.web.build.enabled true }}
        build:
            context: {{ $config.interossea.web.build.path }}
            dockerfile: {{ $config.interossea.web.build.dockerfile }}
        {{- else }}
        image: firstdorsal/interossea-web
        {{- end }}
        container_name: interossea-web
        volumes:
            - ../config/interossea-web.yml:/config.yml:ro
        restart: always
        networks:
            - {{ $config.reverseProxyNetwork }}
        labels:
            traefik:
                enabled: true
                http:
                    routers:
                        interossea-web:
                            rule: "Host(`{{ $config.interossea.web.publicHostname }}`) && PathPrefix(`/`)"
                            entrypoints: {{ $config.entrypoint }}
                            service: interossea-web
                            tls: {{ $config.interossea.web.tls }}
                    services:
                        interossea-web:
                            loadBalancer:
                                servers:
                                    - url: "http://interossea-web:80"
    {{- end }}
    {{- if eq $config.interossea.server.create true }}
    interosseadb:
        build:
            context: ../../db/
            dockerfile: Dockerfile
        restart: always
        container_name: interosseadb
        volumes:
            - interossea-db:/data/:rw
        environment:
            MONGO_INITDB_ROOT_USERNAME: root
            MONGO_INITDB_ROOT_PASSWORD: $MONGO_INITDB_ROOT_PASSWORD_INTEROSSEA
        healthcheck:
            test: |
                test $$(mongosh --quiet -u root -p $MONGO_INITDB_ROOT_PASSWORD_INTEROSSEA --eval "try { rs.initiate({ _id: 'rs0', members: [{ _id: 0, host: 'interosseadb' }] }).ok } catch (_) { rs.status().ok }") -eq 1
            interval: 10s
            start_period: 10s
        networks:
            - interossea-db
    interossea-server:
        {{- if eq $config.interossea.server.build.enabled true }}
        build:
            context: {{ $config.interossea.server.build.path }}
            dockerfile: {{ $config.interossea.server.build.dockerfile }}
        {{- else }}
        image: firstdorsal/interossea
        {{- end }}
        container_name: interossea-server
        restart: always
        networks:
            - {{ $config.reverseProxyNetwork }}
            - interossea-db
            - interossea-server
        volumes:
            - ../config/interossea.yml:/config.yml:ro
            - interossea-keys:/keys/:rw
        environment:
            MONGO_INITDB_ROOT_PASSWORD: $MONGO_INITDB_ROOT_PASSWORD_INTEROSSEA
            INTEROSSEA_MAIL_USERNAME: {{ $config.interossea.server.mail.username}}
            INTEROSSEA_MAIL_PASSWORD: $INTEROSSEA_MAIL_PASSWORD
            INTEROSSEA_MAIL_SMTP_SERVER: {{ $config.interossea.server.mail.smtpServer}}
            INTEROSSEA_MAIL_FROM_NAME: {{ $config.interossea.server.mail.fromName}}
            INTEROSSEA_MAIL_FROM_ADDRESS: {{ $config.interossea.server.mail.fromAddress}}
            INTEROSSEA_MAIL_USER_AGENT: {{ $config.interossea.server.mail.userAgent}}
            INTEROSSEA_MAIL_REPLY_TO: {{ $config.interossea.server.mail.replyTo}}
            INTEROSSEA_WEB_HOSTNAME: {{ $config.interossea.server.publicHostname}}
            INTEROSSEA_WEB_PROTOCOL: {{ ternary "https" "http" $config.interossea.server.tls }}
            INTEROSSEA_FILEZ_ALLOWED_ORIGINS: {{ ternary "https://" "http://" $config.tls true }}{{ $config.hostname}}
        labels:
            traefik:
                enabled: true
                http:
                    routers:
                        interossea-server:
                            rule: "Host(`{{ $config.interossea.server.publicHostname }}`) && PathPrefix(`/api`)"
                            entrypoints: {{ $config.entrypoint }}
                            service: interossea-server
                            tls: {{ $config.tls }}
                    services:
                        interossea-server:
                            loadBalancer:
                                servers:
                                    - url: "http://interossea-server:80"
    {{- end }}
volumes:
    filez-storage:
        name: filez-storage
    filez-db:
        name: filez-db
    interossea-db:
        name: interossea-db
    {{- range $config.addons }}
    {{- if eq .storage true }}
    filez-addons-{{ .name }}:
        name: filez-addons-{{ .name }}
    {{- end }}
    {{- end }}
    {{- if eq $config.interossea.server.create true }}
    interossea-keys:
        name: interossea-keys
    {{- end }}
    
networks:
    filez-server-db:
        name: filez-server-db
    {{- range $config.addons }}
    {{- if eq .db true }}
    filez-addons-{{ .name }}-db:
        name: filez-addons-{{ .name }}-db
    {{- end }}
    {{- end }}
    {{ $config.reverseProxyNetwork }}:
        name: {{ $config.reverseProxyNetwork }}
    {{- if eq $config.interossea.server.create true }}
    interossea-server:
        name: interossea-server
    interossea-db:
        name: interossea-db
    {{- end }}

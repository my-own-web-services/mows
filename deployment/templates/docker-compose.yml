{{- $config :=  yamlFile "../config.yml" -}}

{{- $interosseaServerHostname := joindomain $config.interossea.server.publicHostname.subdomain (ternary "localhost" $config.interossea.server.publicHostname.domain (eq $config.routing "local")) -}}

{{- $interosseaWebHostname := joindomain $config.interossea.web.publicHostname.subdomain (ternary "localhost" $config.interossea.web.publicHostname.domain (eq $config.routing "local")) -}}

{{- $filezServerHostname := joindomain $config.filez.server.publicHostname.subdomain (ternary "localhost" $config.filez.server.publicHostname.domain (eq $config.routing "local")) -}}

{{- $filezWebHostname := joindomain $config.filez.web.publicHostname.subdomain (ternary "localhost" $config.filez.web.publicHostname.domain (eq $config.routing "local")) -}}

version: "3.9"
services:
    filez-server:
        {{- if eq $config.filez.server.build.enabled true }}
        build:
            context: {{ $config.filez.server.build.path }}
            dockerfile: {{ $config.filez.server.build.dockerfile }}
        {{- else }}
        image: firstdorsal/filez-server
        {{- end }}
        container_name: filez-server
        volumes:
            - ./config/filez-server.yml:/config.yml:ro
            - filez-storage:/storage:rw
            {{- range $config.filez.addons }}
            {{- if eq .storage true }}
            - filez-addons-{{.name}}:/appdata/{{.name}}:ro
            {{- end }}
            {{- end }}
            {{- range $config.filez.readonlyMounts }}
            - {{ .path }}:/readonly/{{ .name }}/:ro
            {{- end }}
        restart: always
        networks:
            - filez-server-db
            - {{ $config.reverseProxy.network }}
            {{- if eq $config.interossea.server.create true }}
            - interossea-server
            {{- end }}
        environment:
            MONGO_INITDB_ROOT_PASSWORD: $MONGO_INITDB_ROOT_PASSWORD_FILEZ
            INTEROSSEA_INTERNAL_URL: {{ $config.interossea.server.internalHostname }}
        labels:
            traefik:
                enabled: true
                http:
                    routers:
                        filez-server:
                            rule: "Host(`{{ $filezServerHostname }}`)"
                            entrypoints: 
                                - {{ ternary "webesecure" "web" $config.tls }}
                            service: filez-server
                            tls: {{ $config.tls }}
                    services:
                        filez-server:
                            loadbalancer:
                                servers:
                                    - url: "http://filez-server:80"
    filez-web:
        {{- if eq $config.filez.web.build.enabled true }}
        build:
            context: {{ $config.filez.web.build.path }}
            dockerfile: {{ $config.filez.web.build.dockerfile }}
        {{- else }}
        image: firstdorsal/filez-web
        {{- end }}
        container_name: filez-web
        volumes:
            - ./config/filez-web.yml:/config.yml:ro
            - ./config/filez-web-ui-config.json:/public/config.json:ro
        restart: always
        environment:
            CSP_CONNECT_SRC: {{ ternary "https://" "http://" $config.tls true }}{{ $interosseaServerHostname}} {{ ternary "https://" "http://" $config.tls true }}{{ $filezServerHostname}}
            CSP_IMG_SRC: {{ ternary "https://" "http://" $config.tls true }}{{ $filezServerHostname}}
        networks:
            - {{ $config.reverseProxy.network }}
        labels:
            traefik:
                enabled: true
                http:
                    routers:
                        filez-web:
                            rule: "Host(`{{ $filezWebHostname }}`)"
                            entrypoints: 
                                - {{ ternary "webesecure" "web" $config.tls }}
                            service: filez-web
                            tls: {{ $config.tls }}
                    services:
                        filez-web:
                            loadbalancer:
                                servers:
                                    - url: "http://filez-web:80"
    {{- range $config.filez.addons }}
    filez-addons-{{.name}}:
        {{- if eq .build.enabled true }}
        build:
            context: {{.build.path}}
            dockerfile: {{.build.dockerfile}}
        {{- else }}
        image: {{.image}}
        {{- end }}
        container_name: filez-addons-{{.name}}
        volumes:
            - ./config/{{.name}}.yml:/config.yml:ro
            {{- if eq .filezAccess true }}
            - filez-storage:/storage:ro
            {{- end }}
            {{- if eq .storage true }}
            - filez-addons-{{.name}}:/output:rw
            {{- end }}
            {{- range $config.filez.readonlyMounts }}
            - {{ .path }}:/readonly/{{ .name }}/:ro
            {{- end }}
        restart: always
        {{- if eq .db true }}
        environment:
            MONGO_INITDB_ROOT_PASSWORD: $MONGO_INITDB_ROOT_PASSWORD_FILEZ
        networks:
            - filez-addons-{{.name}}-db
        {{- end }}
    {{- end }}
    filezdb:
        build:
            context: ../../db/
            dockerfile: Dockerfile
        image: mongo:6
        restart: always
        container_name: filezdb
        hostname: filezdb.localhost
        volumes:
            - filez-db:/data/db/:rw
            - ./filezdb-configdb/:/data/configdb:rw
        {{- if eq $config.filez.server.db.exposeToLocalhost true}}
        ports:
            - 127.0.0.1:{{ $config.filez.server.db.port }}:{{ $config.filez.server.db.port }}
        {{- end }}
        command: ["--port","{{ $config.filez.server.db.port }}","--bind_ip_all", "--keyFile", "/keyfile", "--replSet", "rs0"]
        environment:
            MONGO_INITDB_ROOT_USERNAME: root
            MONGO_INITDB_ROOT_PASSWORD: $MONGO_INITDB_ROOT_PASSWORD_FILEZ
        healthcheck:
            test: |
                test $$(mongosh --port "{{ $config.filez.server.db.port }}" --quiet -u root -p $MONGO_INITDB_ROOT_PASSWORD_FILEZ --eval "try { rs.initiate({ _id: 'rs0', members: [{ _id: 0, host: 'filezdb.localhost:{{ $config.filez.server.db.port }}' }] }).ok } catch (_) { rs.status().ok }") -eq 1
            interval: 10s
            start_period: 10s
        networks:
            - filez-server-db
            {{- range $config.filez.addons }}
            {{- if eq .db true }}
            - filez-addons-{{ .name }}-db
            {{- end }}
            {{- end }}

    {{- if eq $config.interossea.web.create true }}
    interossea-web:
        {{- if eq $config.interossea.web.build.enabled true }}
        build:
            context: {{ $config.interossea.web.build.path }}
            dockerfile: {{ $config.interossea.web.build.dockerfile }}
        {{- else }}
        image: firstdorsal/interossea-web
        {{- end }}
        container_name: interossea-web
        volumes:
            - ./config/interossea-web.yml:/config.yml:ro
            - ./config/interossea-web-ui-config.json:/public/config.json:ro
        restart: always
        environment:
            CSP_CONNECT_SRC: {{ ternary "https://" "http://" $config.tls true }}{{ $interosseaServerHostname}} 
        networks:
            - {{ $config.reverseProxy.network }}
        labels:
            traefik:
                enabled: true
                http:
                    routers:
                        interossea-web:
                            rule: "Host(`{{ $interosseaWebHostname }}`)"
                            entrypoints: 
                                - {{ ternary "webesecure" "web" $config.tls }}
                            service: interossea-web
                            tls: {{ $config.tls }}
                    services:
                        interossea-web:
                            loadbalancer:
                                servers:
                                    - url: "http://interossea-web:80"
    {{- end }}
    {{- if eq $config.interossea.server.create true }}
    interosseadb:
        build:
            context: ../../db/
            dockerfile: Dockerfile
        restart: always
        container_name: interosseadb
        hostname: interosseadb.localhost
        volumes:
            - interossea-db:/data/db/:rw
            - ./interosseadb-configdb/:/data/configdb:rw
        {{- if eq $config.interossea.server.db.exposeToLocalhost true}}
        ports:
            - 127.0.0.1:{{ $config.interossea.server.db.port }}:{{ $config.interossea.server.db.port }}
        {{- end }}
        command: ["--port","{{ $config.interossea.server.db.port }}","--bind_ip_all", "--keyFile", "/keyfile", "--replSet", "rs0"]

        environment:
            MONGO_INITDB_ROOT_USERNAME: root
            MONGO_INITDB_ROOT_PASSWORD: $MONGO_INITDB_ROOT_PASSWORD_INTEROSSEA
        healthcheck:
            test: |
                test $$(mongosh --port "{{ $config.interossea.server.db.port }}" --quiet -u root -p $MONGO_INITDB_ROOT_PASSWORD_INTEROSSEA --eval "try { rs.initiate({ _id: 'rs0', members: [{ _id: 0, host: 'interosseadb.localhost:{{ $config.interossea.server.db.port }}' }] }).ok } catch (_) { rs.status().ok }") -eq 1
            interval: 10s
            start_period: 10s
        networks:
            - interossea-db
    interossea-server:
        {{- if eq $config.interossea.server.build.enabled true }}
        build:
            context: {{ $config.interossea.server.build.path }}
            dockerfile: {{ $config.interossea.server.build.dockerfile }}
        {{- else }}
        image: firstdorsal/interossea
        {{- end }}
        container_name: interossea-server
        restart: always
        networks:
            - {{ $config.reverseProxy.network }}
            - interossea-db
            - interossea-server
        volumes:
            - ./config/interossea-server.yml:/config.yml:ro
            - interossea-keys:/keys/:rw
        environment:
            MONGO_INITDB_ROOT_PASSWORD: $MONGO_INITDB_ROOT_PASSWORD_INTEROSSEA
            INTEROSSEA_MAIL_PASSWORD: $INTEROSSEA_MAIL_PASSWORD
        labels:
            traefik:
                enabled: true
                http:
                    routers:
                        interossea-server:
                            rule: "Host(`{{ $interosseaServerHostname }}`)"
                            entrypoints: 
                                - {{ ternary "webesecure" "web" $config.tls }}
                            service: interossea-server
                            tls: {{ $config.tls }}
                    services:
                        interossea-server:
                            loadbalancer:
                                servers:
                                    - url: "http://interossea-server:80"
    {{- end }}
    {{- if eq $config.reverseProxy.create true }}
    rp:
        container_name: rp
        image: pektin/verkehr
        restart: always
        networks:
            - {{ $config.reverseProxy.network }}
        volumes:
            - ./config/verkehr.yml:/config.yml:ro
            - /var/run/docker.sock:/var/run/docker.sock:ro
        ports:
            - "80:80"
            {{- if eq $config.tls true }}
            - "443:443"
            {{- end }}
        labels:
            traefik:
                http:
                    entrypoints:
                        web:
                            address: ":80"
                        {{- if eq $config.tls true }}
                        webesecure:
                            address: ":443"
                        {{- end }}
        
    {{- end }}
volumes:
    filez-storage:
        name: filez-storage
    filez-db:
        name: filez-db
    interossea-db:
        name: interossea-db
    {{- range $config.filez.addons }}
    {{- if eq .storage true }}
    filez-addons-{{ .name }}:
        name: filez-addons-{{ .name }}
    {{- end }}
    {{- end }}
    {{- if eq $config.interossea.server.create true }}
    interossea-keys:
        name: interossea-keys
    {{- end }}
    
networks:
    filez-server-db:
        name: filez-server-db
    {{- range $config.filez.addons }}
    {{- if eq .db true }}
    filez-addons-{{ .name }}-db:
        name: filez-addons-{{ .name }}-db
    {{- end }}
    {{- end }}
    {{ $config.reverseProxy.network }}:
        name: {{ $config.reverseProxy.network }}
    {{- if eq $config.interossea.server.create true }}
    interossea-server:
        name: interossea-server
    interossea-db:
        name: interossea-db
    {{- end }}

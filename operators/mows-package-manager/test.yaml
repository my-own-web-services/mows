apiVersion: v1
automountServiceAccountToken: true
kind: ServiceAccount
metadata:
  name: mows-core-auth-zitadel-controller

---
apiVersion: v1
automountServiceAccountToken: true
kind: ServiceAccount
metadata:
  labels:
    app: mows-core-auth-zitadel-controller
    app.kubernetes.io/name: mows-core-auth-zitadel-controller
    app.kubernetes.io/version: latest
  name: mows-core-auth-zitadel-controller
  namespace: mows-core-auth-zitadel

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: zitadelresources.zitadel.k8s.mows.cloud
spec:
  group: zitadel.k8s.mows.cloud
  names:
    categories: []
    kind: ZitadelResource
    plural: zitadelresources
    shortNames:
    - zrs
    singular: zitadelresource
  scope: Namespaced
  versions:
  - additionalPrinterColumns: []
    name: v1
    schema:
      openAPIV3Schema:
        description: Auto-generated derived type for ZitadelResourceSpec via `CustomResource`
        properties:
          spec:
            oneOf:
            - required:
              - raw
            properties:
              raw:
                properties:
                  resource:
                    oneOf:
                    - required:
                      - org
                    - required:
                      - project
                    properties:
                      org:
                        properties:
                          name:
                            type: string
                        required:
                        - name
                        type: object
                      project:
                        properties:
                          applications:
                            items:
                              properties:
                                clientDataTarget:
                                  oneOf:
                                  - required:
                                    - vault
                                  properties:
                                    vault:
                                      properties:
                                        name:
                                          type: string
                                        path:
                                          type: string
                                      required:
                                      - name
                                      - path
                                      type: object
                                  type: object
                                method:
                                  oneOf:
                                  - required:
                                    - oidc
                                  - required:
                                    - api
                                  properties:
                                    api:
                                      properties:
                                        authMethodType:
                                          type: string
                                      required:
                                      - authMethodType
                                      type: object
                                    oidc:
                                      properties:
                                        accessTokenRoleAssertion:
                                          type: boolean
                                        accessTokenType:
                                          type: string
                                        additionalOrigins:
                                          items:
                                            type: string
                                          type: array
                                        appType:
                                          type: string
                                        authMethodType:
                                          type: string
                                        backChannelLogoutUri:
                                          type: string
                                        clockSkew:
                                          nullable: true
                                          properties:
                                            nanos:
                                              format: int32
                                              type: integer
                                            seconds:
                                              format: int64
                                              type: integer
                                          required:
                                          - nanos
                                          - seconds
                                          type: object
                                        devMode:
                                          type: boolean
                                        grantTypes:
                                          items:
                                            type: string
                                          type: array
                                        idTokenRoleAssertion:
                                          type: boolean
                                        idTokenUserinfoAssertion:
                                          type: boolean
                                        loginVersion:
                                          nullable: true
                                          type: string
                                        postLogoutRedirectUris:
                                          items:
                                            type: string
                                          type: array
                                        redirectUris:
                                          items:
                                            type: string
                                          type: array
                                        responseTypes:
                                          items:
                                            type: string
                                          type: array
                                        skipNativeAppSuccessPage:
                                          type: boolean
                                        version:
                                          type: string
                                      required:
                                      - accessTokenRoleAssertion
                                      - accessTokenType
                                      - additionalOrigins
                                      - appType
                                      - authMethodType
                                      - backChannelLogoutUri
                                      - devMode
                                      - grantTypes
                                      - idTokenRoleAssertion
                                      - idTokenUserinfoAssertion
                                      - postLogoutRedirectUris
                                      - redirectUris
                                      - responseTypes
                                      - skipNativeAppSuccessPage
                                      - version
                                      type: object
                                  type: object
                                name:
                                  type: string
                              required:
                              - clientDataTarget
                              - method
                              - name
                              type: object
                            type: array
                          name:
                            type: string
                          orgName:
                            type: string
                          roles:
                            items:
                              properties:
                                displayName:
                                  type: string
                                group:
                                  type: string
                                key:
                                  type: string
                              required:
                              - displayName
                              - group
                              - key
                              type: object
                            type: array
                        required:
                        - applications
                        - name
                        - orgName
                        - roles
                        type: object
                    type: object
                required:
                - resource
                type: object
            type: object
          status:
            description: The status object of `ZitadelResource`
            nullable: true
            properties:
              created:
                type: boolean
            required:
            - created
            type: object
        required:
        - spec
        title: ZitadelResource
        type: object
    served: true
    storage: true
    subresources:
      status: {}

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: mows-core-auth-zitadel-controller
rules:
- apiGroups:
  - zitadel.k8s.mows.cloud
  resources:
  - zitadelresource
  - zitadelresource/status
  - zitadelresource/finalizers
  verbs:
  - get
  - list
  - watch
  - patch
  - update
- apiGroups:
  - events.k8s.io
  resources:
  - events
  verbs:
  - create

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: mows-core-auth-zitadel-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: mows-core-auth-zitadel-controller
subjects:
- kind: ServiceAccount
  name: mows-core-auth-zitadel-controller
  namespace: mows-core-auth-zitadel

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: mows-core-auth-zitadel-controller
    app.kubernetes.io/name: mows-core-auth-zitadel-controller
    app.kubernetes.io/version: latest
  name: mows-core-auth-zitadel-controller
  namespace: mows-core-auth-zitadel
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 8080
  selector:
    app: mows-core-auth-zitadel-controller
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: mows-core-auth-zitadel-controller
    app.kubernetes.io/name: mows-core-auth-zitadel-controller
    app.kubernetes.io/version: latest
  name: mows-core-auth-zitadel-controller
  namespace: mows-core-auth-zitadel
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mows-core-auth-zitadel-controller
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: zitadel-controller
      labels:
        app: mows-core-auth-zitadel-controller
    spec:
      containers:
      - env:
        - name: LOG_FILTER
          value: info
        - name: TRACING_FILTER
          value: info
        image: 192.168.112.5:5000/zitadel-controller:latest
        imagePullPolicy: Always
        name: zitadel-controller
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          limits:
            cpu: 100m
            memory: 100Mi
          requests:
            cpu: 50m
            memory: 50Mi
        securityContext: {}
      securityContext: {}
      serviceAccountName: mows-core-auth-zitadel-controller

---
apiVersion: vault.k8s.mows.cloud/v1
kind: VaultResource
metadata:
  name: zitadel-controller-kubernetes-auth-engine
spec:
  authEngine:
    kubernetes:
      roles:
        mows-core-auth-zitadel-controller:
          policyIds:
          - zitadel-controller-policy
          serviceAccountName: mows-core-auth-zitadel-controller

---
apiVersion: vault.k8s.mows.cloud/v1
kind: VaultResource
metadata:
  name: zitadel-controller-policy
spec:
  engineAccessPolicy:
    subPolicies:
    - capabilities:
      - read
      - list
      engineId: zitadel-secrets
      engineType: secret
      subPath: '*'

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: zitadel
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: zitadel
    app.kubernetes.io/version: v2.65.1
    helm.sh/chart: zitadel-8.6.1
  name: zitadel
spec:
  ports:
  - appProtocol: http2
    name: http2-server
    port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app.kubernetes.io/instance: zitadel
    app.kubernetes.io/name: zitadel
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: start
    app.kubernetes.io/instance: zitadel
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: zitadel
    app.kubernetes.io/version: v2.65.1
    helm.sh/chart: zitadel-8.6.1
  name: zitadel
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: zitadel
      app.kubernetes.io/name: zitadel
  template:
    metadata:
      annotations:
        checksum/configmap: a3e7daffe63fbbcc6e420a39eee09d41619010a115e9ddd52701f89b94cc9e0c
        checksum/secret-db-ssl-root-crt: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        checksum/secret-zitadel-secrets: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
      labels:
        app.kubernetes.io/component: start
        app.kubernetes.io/instance: zitadel
        app.kubernetes.io/name: zitadel
    spec:
      containers:
      - args:
        - start
        - --config
        - /config/zitadel-config-yaml
        - --config
        - /zitadel-secret-config-yaml/config.yaml
        - --masterkeyFromEnv
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        - name: ZITADEL_MASTERKEY
          valueFrom:
            secretKeyRef:
              key: masterkey
              name: zitadel-masterkey
        image: ghcr.io/zitadel/zitadel:v2.65.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /debug/healthz
            port: http2-server
            scheme: HTTP
          initialDelaySeconds: 0
          periodSeconds: 5
        name: zitadel
        ports:
        - containerPort: 8080
          name: http2-server
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /debug/ready
            port: http2-server
            scheme: HTTP
          initialDelaySeconds: 0
          periodSeconds: 5
        resources: {}
        securityContext:
          privileged: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
        startupProbe:
          failureThreshold: 30
          httpGet:
            path: /debug/ready
            port: http2-server
            scheme: HTTP
          periodSeconds: 1
        volumeMounts:
        - mountPath: /config
          name: zitadel-config-yaml
          readOnly: true
        - mountPath: /zitadel-secret-config-yaml
          name: zitadel-secret-config-yaml
          readOnly: true
      enableServiceLinks: false
      securityContext:
        fsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      serviceAccountName: zitadel
      volumes:
      - configMap:
          name: zitadel-config-yaml
        name: zitadel-config-yaml
      - name: zitadel-secret-config-yaml
        secret:
          defaultMode: 288
          secretName: zitadel-config

---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-delete-policy: before-hook-creation
    helm.sh/hook-weight: '0'
  labels:
    app.kubernetes.io/instance: zitadel
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: zitadel
    app.kubernetes.io/version: v2.65.1
    helm.sh/chart: zitadel-8.6.1
  name: zitadel

---
apiVersion: v1
data:
  zitadel-config-yaml: |2-

    ExternalSecure: true
    FirstInstance:
      Org:
        Machine:
          Machine:
            Username: zitadel-admin-sa
    Machine:
      Identification:
        Hostname:
          Enabled: true
        Webhook:
          Enabled: false
kind: ConfigMap
metadata:
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-delete-policy: before-hook-creation
    helm.sh/hook-weight: '0'
  labels:
    app.kubernetes.io/instance: zitadel
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: zitadel
    app.kubernetes.io/version: v2.65.1
    helm.sh/chart: zitadel-8.6.1
  name: zitadel-config-yaml

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-delete-policy: before-hook-creation
    helm.sh/hook-weight: '0'
  labels:
    app.kubernetes.io/instance: zitadel
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: zitadel
    app.kubernetes.io/version: v2.65.1
    helm.sh/chart: zitadel-8.6.1
  name: zitadel
rules:
- apiGroups:
  - ''
  resources:
  - secrets
  verbs:
  - get
  - create
- apiGroups:
  - ''
  resources:
  - pods
  verbs:
  - get

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-delete-policy: before-hook-creation
    helm.sh/hook-weight: '0'
  labels:
    app.kubernetes.io/instance: zitadel
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: zitadel
    app.kubernetes.io/version: v2.65.1
    helm.sh/chart: zitadel-8.6.1
  name: zitadel
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: zitadel
subjects:
- kind: ServiceAccount
  name: zitadel

---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-delete-policy: before-hook-creation
    helm.sh/hook-weight: '1'
  labels:
    app.kubernetes.io/component: init
    app.kubernetes.io/instance: zitadel
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: zitadel
    app.kubernetes.io/version: v2.65.1
    helm.sh/chart: zitadel-8.6.1
  name: zitadel-init
spec:
  activeDeadlineSeconds: 1800
  backoffLimit: 10
  template:
    metadata:
      labels:
        app.kubernetes.io/component: init
        app.kubernetes.io/instance: zitadel
        app.kubernetes.io/name: zitadel
    spec:
      containers:
      - args:
        - init
        - --config
        - /config/zitadel-config-yaml
        - --config
        - /zitadel-secret-config-yaml/config.yaml
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        image: ghcr.io/zitadel/zitadel:v2.65.1
        imagePullPolicy: IfNotPresent
        name: zitadel-init
        resources: {}
        securityContext:
          privileged: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
        volumeMounts:
        - mountPath: /config
          name: zitadel-config-yaml
          readOnly: true
        - mountPath: /zitadel-secret-config-yaml
          name: zitadel-secret-config-yaml
          readOnly: true
      enableServiceLinks: false
      restartPolicy: OnFailure
      securityContext:
        fsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      serviceAccountName: zitadel
      volumes:
      - configMap:
          defaultMode: 288
          name: zitadel-config-yaml
        name: zitadel-config-yaml
      - name: zitadel-secret-config-yaml
        secret:
          defaultMode: 288
          secretName: zitadel-config

---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-delete-policy: before-hook-creation
    helm.sh/hook-weight: '2'
  labels:
    app.kubernetes.io/component: setup
    app.kubernetes.io/instance: zitadel
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: zitadel
    app.kubernetes.io/version: v2.65.1
    helm.sh/chart: zitadel-8.6.1
  name: zitadel-setup
spec:
  activeDeadlineSeconds: 1800
  backoffLimit: 10
  template:
    metadata:
      labels:
        app.kubernetes.io/component: setup
        app.kubernetes.io/instance: zitadel
        app.kubernetes.io/name: zitadel
    spec:
      containers:
      - args:
        - setup
        - --masterkeyFromEnv
        - --config
        - /config/zitadel-config-yaml
        - --steps
        - /config/zitadel-config-yaml
        - --config
        - /zitadel-secret-config-yaml/config.yaml
        - --steps
        - /zitadel-secret-config-yaml/config.yaml
        - --init-projections=true
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        - name: ZITADEL_MASTERKEY
          valueFrom:
            secretKeyRef:
              key: masterkey
              name: zitadel-masterkey
        - name: ZITADEL_FIRSTINSTANCE_MACHINEKEYPATH
          value: /machinekey/sa.json
        image: ghcr.io/zitadel/zitadel:v2.65.1
        imagePullPolicy: IfNotPresent
        name: zitadel-setup
        resources: {}
        securityContext:
          privileged: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
        volumeMounts:
        - mountPath: /config
          name: zitadel-config-yaml
          readOnly: true
        - mountPath: /zitadel-secret-config-yaml
          name: zitadel-secret-config-yaml
          readOnly: true
        - mountPath: /machinekey
          name: machinekey
      - command:
        - sh
        - -c
        - |
          until [ "$(kubectl -n mows-core-auth-zitadel get po ${POD_NAME} -o jsonpath="{.status.containerStatuses[?(@.name=='zitadel-setup')].state.terminated.reason}")" = "Completed" ]; do echo 'waiting for zitadel-setup container to terminate'; sleep 5; done && echo 'zitadel-setup container terminated' && if [ -f /machinekey/sa.json ]; then kubectl -n mows-core-auth-zitadel create secret generic zitadel-admin-sa --from-file=zitadel-admin-sa.json=/machinekey/sa.json; fi;
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        image: bitnami/kubectl:1.31
        name: zitadel-machinekey
        resources: {}
        securityContext:
          privileged: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
        volumeMounts:
        - mountPath: /machinekey
          name: machinekey
          readOnly: true
      enableServiceLinks: false
      restartPolicy: OnFailure
      securityContext:
        fsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      serviceAccountName: zitadel
      volumes:
      - configMap:
          defaultMode: 288
          name: zitadel-config-yaml
        name: zitadel-config-yaml
      - name: zitadel-secret-config-yaml
        secret:
          defaultMode: 288
          secretName: zitadel-config
      - emptyDir: {}
        name: machinekey

---
apiVersion: pektin.k8s.mows.cloud/v1
kind: PektinDns
metadata:
  name: zitadel-dns
spec:
  plain:
  - meta: ''
    name: zitadel.{§ .config.domain §}.
    rr_set:
      A:
      - value: '{§ .config.legacy_ip §}'
    ttl: 60

---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: zitadel-ingress
spec:
  entryPoints:
  - websecure
  routes:
  - kind: Rule
    match: Host(`zitadel.{§ .config.domain §}`)
    services:
    - kind: Service
      name: zitadel
      port: 8080

---
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: zitadel-postgres
spec:
  enableSuperuserAccess: true
  instances: 1
  primaryUpdateStrategy: unsupervised
  storage:
    size: 2Gi
  superuserSecret:
    name: zitadel-db-admin

---
apiVersion: vault.k8s.mows.cloud/v1
kind: VaultResource
metadata:
  name: zitadel-password-sync
spec:
  secretSync:
    kvMapping:
      db:
        engine: zitadel-secrets
        path: db
      zitadel:
        engine: zitadel-secrets
        path: zitadel
    targets:
      secrets:
        zitadel-config:
          map:
            config.yaml: "ExternalSecure: true\nExternalDomain: zitadel.{§ .config.domain §}\nTLS:\n    Enabled: false\nDefaultInstance:\n    OIDCSettings:\n        AccessTokenLifetime: 12h\n        IdTokenLifetime: 12h\n        RefreshTokenIdleExpiration: 720h #30d\n        RefreshTokenExpiration: 2160h #90d\n    Org:\n        Machine:\n            Machine: \n                Username: zitadel-admin-sa\n    #    Human:\n    #        UserName: zitadel-admin\n    #        Password: \"{% .secrets.zitadel.adminPassword %}\"\n    #        PasswordChangeRequired: false\nDatabase:\n    Postgres:\n        Host: zitadel-postgres-rw\n        Port: 5432\n        Database: zitadel\n        MaxOpenConns: 20\n        MaxIdleConns: 10\n        MaxConnLifetime: 30m\n        MaxConnIdleTime: 5m\n        User:\n            Username: zitadel\n            Password: \"{% .secrets.db.user %}\"\n            SSL:\n                Mode: disable\n        Admin:\n            Username: postgres\n            Password: \"{% .secrets.db.admin %}\"\n            SSL:\n                Mode: disable\n"
        zitadel-db-admin:
          map:
            password: '{% .secrets.db.admin  %}'
            username: postgres
          type: kubernetes.io/basic-auth
        zitadel-db-user:
          map:
            password: '{% .secrets.db.user %}'
            username: zitadel
          type: kubernetes.io/basic-auth
        zitadel-masterkey:
          map:
            masterkey: '{% .secrets.zitadel.masterkey %}'

---
apiVersion: vault.k8s.mows.cloud/v1
kind: VaultResource
metadata:
  name: zitadel-secrets
spec:
  secretEngine:
    kv-v2:
      kvData:
        db:
          admin: '{% randAlphaNum 100 %}'
          user: '{% randAlphaNum 100 %}'
        zitadel:
          adminPassword: '{% randAlphaNum 60 %}aA1!'
          masterkey: '{% randAlphaNum 32 %}'

---

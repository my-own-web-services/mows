apiVersion: zitadel.k8s.mows.cloud/v1
kind: ZitadelResource
metadata:
    name: argocd-oidc
spec:
    raw:
        resource:
            project:
                projectRoleAssertion: true
                projectRoleCheck: true
                roles:
                    -   key: argocd_administrators
                        group: argocd_administrators
                        displayName: Administrators
                    -   key: argocd_users
                        group: argocd_users
                        displayName: Users
                adminRoles: ["argocd_administrators", "argocd_users"]
                applications:
                    -   name: argocd
                        clientDataTarget: 
                            vault:
                                secretEngineName: argocd-oidc
                                secretEngineSubPath: oidc
                                kubernetesAuthEngineName: zitadel-controller-service-account
                        method:
                            oidc:
                                redirectUris:
                                    - https://argocd.{ยง .config.domain ยง}/auth/callback
                                responseTypes:
                                    - code
                                authenticationMethod: basic
                                grantTypes:
                                    - authorizationCode
                                postLogoutRedirectUris:
                                    - https://argocd.{ยง .config.domain ยง}
                                appType: web
                                accessTokenType: bearer
                                idTokenRoleAssertion: true
                                idTokenUserinfoAssertion: true
                actionFlow:
                    actions:
                        groupsClaim:
                            allowedToFail: true
                            timeoutSeconds: 10
                            script: |
                                /**
                                * sets the roles an additional claim in the token with roles as value an project as key
                                *
                                * The role claims of the token look like the following:
                                *
                                * // added by the code below
                                * "groups": ["{roleName}", "{roleName}", ...],
                                *
                                * Flow: Complement token, Triggers: Pre Userinfo creation, Pre access token creation
                                *
                                * @param ctx
                                * @param api
                                */
                                function groupsClaim(ctx, api) {
                                if (ctx.v1.user.grants === undefined || ctx.v1.user.grants.count == 0) {
                                    return;
                                }

                                let grants = [];
                                ctx.v1.user.grants.grants.forEach((claim) => {
                                    claim.roles.forEach((role) => {
                                    grants.push(role);
                                    });
                                });

                                api.v1.claims.setClaim("groups", grants);
                                }
                    flow:
                        complementToken:
                            preUserinfoCreation: 
                                - groupsClaim
                            preAccessTokenCreation: 
                                - groupsClaim

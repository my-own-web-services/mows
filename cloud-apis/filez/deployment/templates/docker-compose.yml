{{- $config :=  yamlFile "../config.yml" -}}

{{- $interosseaServerHostname := joindomain $config.interossea.server.publicHostname.subdomain (ternary "localhost" $config.interossea.server.publicHostname.domain (eq $config.routing "local")) -}}

{{- $interosseaWebHostname := joindomain $config.interossea.web.publicHostname.subdomain (ternary "localhost" $config.interossea.web.publicHostname.domain (eq $config.routing "local")) -}}

{{- $filezServerHostname := joindomain $config.filez.server.publicHostname.subdomain (ternary "localhost" $config.filez.server.publicHostname.domain (eq $config.routing "local")) -}}

{{- $filezWebHostname := joindomain $config.filez.web.publicHostname.subdomain (ternary "localhost" $config.filez.web.publicHostname.domain (eq $config.routing "local")) -}}

version: "3.9"
services:
    filez-server:
        {{- if eq $config.filez.server.build.enabled true }}
        build:
            context: {{ $config.filez.server.build.path }}
            dockerfile: {{ $config.filez.server.build.dockerfile }}
        {{- else }}
        image: firstdorsal/filez-server

        {{- end }}
        {{- if eq $config.filez.runAsRoot true }}
        user: root
        {{- end }}
        
        container_name: filez-server
        volumes:
            - ./config/filez-server.yml:/config.yml:ro

{{- range $key, $value := $config.filez.storage }}

    {{- if eq $value.type "volume" }}
            - filez-storage-{{ $key }}:/storage/{{ $key }}/:rw
    {{- else if eq $value.type "bind" }}
            - {{ $value.path }}:/storage/{{ $key }}/:rw
    {{- end }}

    {{- range $appKey, $appValue := $value.appStorage  }}
        {{- if eq $appValue.type "volume" }}
            - filez-storage-{{ $key }}-{{ $appKey }}:/app_data/{{ $key }}/{{ $appKey }}/:rw
        {{- else if eq $appValue.type "bind" }}
            - {{ $appValue.path }}:/app_data/{{ $key }}/{{ $appKey }}/:rw
        {{- end }}
    {{- end }}
{{- end }}

            {{- if eq $config.filez.server.dev.createMockUsers true }}
            - ./data/dev/mock_users.yml:/.dev/mock_users.yml:ro
            {{- end }}   

        restart: always
        networks:
            - filez-server-db
            - {{ $config.reverseProxy.network }}
            {{- if eq $config.interossea.server.create true }}
            - interossea-server
            {{- end }}
        environment:
            MONGODB_ROOT_PASSWORD: $MONGODB_ROOT_PASSWORD_FILEZ
            INTEROSSEA_INTERNAL_URL: {{ $config.interossea.server.internalHostname }}
        labels:
            traefik:
                docker:
                    network: {{ $config.reverseProxy.network }}
                enable: true
                http:
                    routers:
                        filez-server:
                            rule: "Host(`{{ $filezServerHostname }}`)"
                            entrypoints: {{ ternary "websecure" "web" $config.tls }}
                            service: filez-server
                            tls: {{ $config.tls }}
                    services:
                        filez-server:
                            loadbalancer:
                                server:
                                    port: 80
    filez-web:
        {{- if eq $config.filez.web.build.enabled true }}
        build:
            context: {{ $config.filez.web.build.path }}
            dockerfile: {{ $config.filez.web.build.dockerfile }}
        {{- else }}
        image: firstdorsal/filez-web
        {{- end }}        
        container_name: filez-web
        volumes:
            - ./config/filez-web.yml:/config.yml:ro
            - ./config/filez-web-ui-config.json:/public/config.json:ro
        restart: always
        environment:
            CSP_CONNECT_SRC: {{ ternary "https://" "http://" $config.tls true }}{{ $interosseaServerHostname}} {{ ternary "https://" "http://" $config.tls true }}{{ $filezServerHostname}}
            CSP_IMG_SRC: {{ ternary "https://" "http://" $config.tls true }}{{ $filezServerHostname}}
            CSP_MEDIA_SRC: {{ ternary "https://" "http://" $config.tls true }}{{ $filezServerHostname}}
        networks:
            - {{ $config.reverseProxy.network }}
        labels:
            traefik:
                docker:
                    network: {{ $config.reverseProxy.network }}
                enable: true
                http:
                    routers:
                        filez-web:
                            rule: "Host(`{{ $filezWebHostname }}`)"
                            entrypoints: {{ ternary "websecure" "web" $config.tls }}
                            service: filez-web
                            tls: {{ $config.tls }}
                    services:
                        filez-web:
                            loadbalancer:
                                server:
                                    port: 80
    {{- range $addon :=$config.filez.addons }}
    filez-addons-{{$addon.name}}:
        {{- if eq $addon.build.enabled true }}
        build:
            context: {{$addon.build.path}}
            dockerfile: {{$addon.build.dockerfile}}
        {{- else }}
        image: {{$addon.image}}
        {{- end }}        
        {{- if eq $config.filez.runAsRoot true }}
        user: root
        {{- end }}
        container_name: filez-addons-{{$addon.name}}
        volumes:
            - ./config/{{$addon.name}}.yml:/config.yml:ro
{{- if eq $addon.filezAccess true }}
    {{- range $key, $value := $config.filez.storage }}
        {{- if eq $value.type "volume" }}
            - filez-storage-{{ $key }}:/storage/{{ $key }}/:ro
        {{- else if eq $value.type "bind" }}
            - {{ $value.path }}:/storage/{{ $key }}/:ro
        {{- end }}
    {{- end }}
{{- end }}
{{- range $key, $value := $config.filez.storage }}
    {{- range $appKey, $appValue := $value.appStorage  }}
        {{- if eq $addon.name $appKey }}
            {{- if eq $appValue.type "volume" }}
            - filez-storage-{{ $key }}-{{ $appKey }}:/app_data/{{ $key }}/{{ $appKey }}/:rw
            {{- else if eq $appValue.type "bind" }}
            - {{ $appValue.path }}:/app_data/{{ $key }}/{{ $appKey }}/:rw
            {{- end }}
        {{- end }}
    {{- end }}
{{- end }}
        restart: always
        {{- if eq .db true }}
        environment:
            MONGODB_ROOT_PASSWORD: $MONGODB_ROOT_PASSWORD_FILEZ
            CLEAR_OWN_APP_DATA_ON_START: {{ .resetOnRestart }}
            {{- if eq .name "metadata" }}
            OMDB_API_KEY: $OMDB_API_KEY
            {{- end }}
        networks:
            - filez-addons-{{.name}}-db
        {{- end }}
    {{- end }}
    filez-db:
        image: bitnami/mongodb
        restart: always
        container_name: filez-db
        hostname: filez-db.localhost
        volumes:
            - filez-db:/bitnami:rw
        {{- if eq $config.filez.server.db.exposeToLocalhost true}}
        ports:
            - 127.0.0.1:{{ $config.filez.server.db.port }}:{{ $config.filez.server.db.port }}
        {{- end }}
        environment:
            MONGODB_ROOT_PASSWORD: $MONGODB_ROOT_PASSWORD_FILEZ
            MONGODB_ROOT_USER: root
            MONGODB_ADVERTISED_HOSTNAME: filez-db.localhost
            MONGODB_ADVERTISED_PORT_NUMBER: {{ $config.filez.server.db.port }}

            MONGODB_REPLICA_SET_MODE: primary
            MONGODB_REPLICA_SET_KEY: "abcdefg"
            MONGODB_REPLICA_SET_NAME: replicaset

            MONGODB_PORT_NUMBER: {{ $config.filez.server.db.port }}
        networks:
            - filez-server-db
            {{- range $config.filez.addons }}
            {{- if eq .db true }}
            - filez-addons-{{ .name }}-db
            {{- end }}
            {{- end }}

    {{- if eq $config.interossea.web.create true }}
    interossea-web:
        {{- if eq $config.interossea.web.build.enabled true }}
        build:
            context: {{ $config.interossea.web.build.path }}
            dockerfile: {{ $config.interossea.web.build.dockerfile }}
        {{- else }}
        image: firstdorsal/interossea-web
        {{- end }}        
        container_name: interossea-web
        volumes:
            - ./config/interossea-web.yml:/config.yml:ro
            - ./config/interossea-web-ui-config.json:/public/config.json:ro
        restart: always
        environment:
            CSP_CONNECT_SRC: {{ ternary "https://" "http://" $config.tls true }}{{ $interosseaServerHostname}} 
        networks:
            - {{ $config.reverseProxy.network }}
        labels:
            traefik:
                docker:
                    network: {{ $config.reverseProxy.network }}
                enable: true
                http:
                    routers:
                        interossea-web:
                            rule: "Host(`{{ $interosseaWebHostname }}`)"
                            entrypoints: {{ ternary "websecure" "web" $config.tls }}
                            service: interossea-web
                            tls: {{ $config.tls }}
                    services:
                        interossea-web:
                            loadbalancer:
                                server:
                                    port: 80
    {{- end }}
    {{- if eq $config.interossea.server.create true }}
    interossea-db:
        image: bitnami/mongodb
        restart: always
        container_name: interossea-db
        hostname: interossea-db.localhost
        volumes:
            - interossea-db:/bitnami:rw
        {{- if eq $config.interossea.server.db.exposeToLocalhost true}}
        ports:
            - 127.0.0.1:{{ $config.interossea.server.db.port }}:{{ $config.interossea.server.db.port }}
        {{- end }}
        environment:
            MONGODB_ROOT_PASSWORD: $MONGODB_ROOT_PASSWORD_INTEROSSEA
            MONGODB_ROOT_USER: root
            MONGODB_ADVERTISED_HOSTNAME: interossea-db.localhost
            MONGODB_ADVERTISED_PORT_NUMBER: {{ $config.interossea.server.db.port }}

            MONGODB_REPLICA_SET_MODE: primary
            MONGODB_REPLICA_SET_KEY: "abcdefg"
            MONGODB_REPLICA_SET_NAME: replicaset

            MONGODB_PORT_NUMBER: {{ $config.interossea.server.db.port }}
        networks:
            - interossea-db
    interossea-server:
        {{- if eq $config.interossea.server.build.enabled true }}
        build:
            context: {{ $config.interossea.server.build.path }}
            dockerfile: {{ $config.interossea.server.build.dockerfile }}
        {{- else }}
        image: firstdorsal/interossea-server
        {{- end }}        
        container_name: interossea-server
        restart: always
        networks:
            - {{ $config.reverseProxy.network }}
            - interossea-db
            - interossea-server
        volumes:
            - ./config/interossea-server.yml:/config.yml:ro
            - interossea-keys:/keys/:rw
            - ./config/interossea-redirects.env:/redirects/filez.env:ro
        environment:
            MONGODB_ROOT_PASSWORD: $MONGODB_ROOT_PASSWORD_INTEROSSEA
            INTEROSSEA_MAIL_PASSWORD: $INTEROSSEA_MAIL_PASSWORD
        labels:
            traefik:
                docker:
                    network: {{ $config.reverseProxy.network }}
                enable: true
                http:
                    routers:
                        interossea-server:
                            rule: "Host(`{{ $interosseaServerHostname }}`)"
                            entrypoints: {{ ternary "websecure" "web" $config.tls }}
                            service: interossea-server
                            tls: {{ $config.tls }}
                    services:
                        interossea-server:
                            loadbalancer:
                                server:
                                    port: 80
    {{- end }}
    {{- if eq $config.reverseProxy.create true }}
    rp:
        container_name: rp
        image: pektin/verkehr
        restart: always
        networks:
            - {{ $config.reverseProxy.network }}
        volumes:
            - ./config/verkehr.yml:/config.yml:ro
            - /var/run/docker.sock:/var/run/docker.sock:ro
        ports:
            - "80:80"
            {{- if eq $config.tls true }}
            - "443:443"
            {{- end }}
        labels:
            traefik:
                http:
                    entrypoints:
                        web:
                            address: ":80"
                        {{- if eq $config.tls true }}
                        websecure:
                            address: ":443"
                        {{- end }}
        
    {{- end }}
volumes:
{{- range $key, $value := $config.filez.storage }}
    {{- if eq $value.type "volume" }}
    filez-storage-{{ $key }}:
        name: filez-storage-{{ $key }}
    {{- end }}
    {{- range $appKey, $appValue := $value.appStorage  }}
        {{- if eq $appValue.type "volume" }}
    filez-storage-{{ $key }}-{{ $appKey }}:
        name: filez-storage-{{ $key }}-{{ $appKey }}
        {{- end }}
    {{- end }}
{{- end }}
    filez-db:
        name: filez-db
{{- if eq $config.interossea.server.create true }}
    interossea-keys:
        name: interossea-keys
    interossea-db:
        name: interossea-db
{{- end }}
    
networks:
    {{ $config.reverseProxy.network }}:
        name: {{ $config.reverseProxy.network }}
{{- if eq $config.reverseProxy.create true }}
        driver: bridge
        enable_ipv6: true
        ipam:
            driver: default
            config:
                - subnet: {{ $config.networks.subnet.legacy }}.240/28
                - subnet: {{ $config.networks.subnet.v6 }}f0/124
{{- end }}
    filez-server-db:
        name: filez-server-db
        driver: bridge
        enable_ipv6: true
        ipam:
            driver: default
            config:
                - subnet: {{ $config.networks.subnet.legacy }}.224/28
                - subnet: {{ $config.networks.subnet.v6 }}e0/124
{{- if eq $config.interossea.server.create true }}
    interossea-server:
        name: interossea-server
        driver: bridge
        enable_ipv6: true
        ipam:
            driver: default
            config:
                - subnet: {{ $config.networks.subnet.legacy }}.208/28
                - subnet: {{ $config.networks.subnet.v6 }}d0/124
    interossea-db:
        name: interossea-db
        driver: bridge
        enable_ipv6: true
        ipam:
            driver: default
            config:
                - subnet: {{ $config.networks.subnet.legacy }}.192/28
                - subnet: {{ $config.networks.subnet.v6 }}c0/124
{{- end }}
{{- range $index, $addon := $config.filez.addons }}
    {{- if eq .db true }}
    filez-addons-{{ .name }}-db:
        name: filez-addons-{{ .name }}-db
        driver: bridge
        enable_ipv6: true
        ipam:
            driver: default
            config:
                - subnet: {{ $config.networks.subnet.legacy }}.{{ mul $index 16}}/28
                - subnet: {{ $config.networks.subnet.v6 }}{{ $index }}0/124
    {{- end }}
{{- end }}
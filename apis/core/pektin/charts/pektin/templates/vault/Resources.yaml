apiVersion: vault.k8s.mows.cloud/v1
kind: VaultResource
metadata:
    name: pektin-signing
spec:
    secretEngine:
        transit: {}
---
apiVersion: vault.k8s.mows.cloud/v1
kind: VaultResource
metadata:
    name: pektin-policies
spec:
    secretEngine:
        kv-v2:
            kvData:
                pektin-zertificat:
                    ribston-policy: |- {{ range .Files.Lines "policies/ribston/acme.ribston.js" }}
                        {{ . }}{{ end }}
                pektin-resource-controller:
                    ribston-policy: |- {{ range .Files.Lines "policies/ribston/allow-everything.ribston.js" }}
                        {{ . }}{{ end }}
---
apiVersion: vault.k8s.mows.cloud/v1
kind: VaultResource
metadata:
    name: pektin-zertificat
spec:
    secretEngine:
        kv-v2:
            kvData: {}
                
---
apiVersion: vault.k8s.mows.cloud/v1
kind: VaultResource
metadata:
    name: pektin-api-policy
spec:
    engineAccessPolicy:
        subPolicies:
            - engineId: pektin-signing
              engineType: secret
              subPath: "*"
              capabilities: ["update", "read", "create"]

---
# allow zertificat access to its engine to store TLS certificates

apiVersion: vault.k8s.mows.cloud/v1
kind: VaultResource
metadata:
    name: pektin-zertificat-policy
spec:
    engineAccessPolicy:
        subPolicies:
            - engineId: pektin-zertificat
              engineType: secret
              subPath: "*"
              capabilities: ["update", "read", "create", "delete", "list"]

---

# create the auth engine for general authentication
apiVersion: vault.k8s.mows.cloud/v1
kind: VaultResource
metadata:
    name: pektin-kubernetes
spec:
    authEngine:
        kubernetes:
            roles:
                pektin-api:
                    serviceAccountName: pektin-api
                    policyIds: ["pektin-api-policy"]
                pektin-zertificat:
                    serviceAccountName: pektin-zertificat
                    policyIds: ["pektin-zertificat-policy"]
---
apiVersion: vault.k8s.mows.cloud/v1
kind: VaultResource
metadata:
    name: traefik-certificates-sync
    labels:
        k8s.mows.cloud/sudo: "true"
        vault.k8s.mows.cloud/force-target-namespace: "mows-core-network-ingress"
spec:
    secretSync:
        kvMapping:
            certificates: # name in the template engine
                engine: pektin-zertificat # name of the secretEngine in the same namespace as the resource
                path: "{ยง .config.domain ยง}" # path to the secret in the secretEngine
        targets:
            secrets:
                traefik-certificates:
                    data:
                        tls.crt: "{% .secrets.certificates.cert %}"
                        tls.key: "{% .secrets.certificates.key %}"
---
apiVersion: vault.k8s.mows.cloud/v1
kind: VaultResource
metadata:
    name: stalwart-certificates-sync
    labels:
        k8s.mows.cloud/sudo: "true"
        vault.k8s.mows.cloud/force-target-namespace: "mows-core-email"
spec:
    secretSync:
        kvMapping:
            certificates: # name in the template engine
                engine: pektin-zertificat # name of the secretEngine in the same namespace as the resource
                path: "{ยง .config.domain ยง}" # path to the secret in the secretEngine
        targets:
            secrets:
                stalwart-default-certificates:
                    data:
                        tls.crt: "{% .secrets.certificates.cert %}"
                        tls.key: "{% .secrets.certificates.key %}"
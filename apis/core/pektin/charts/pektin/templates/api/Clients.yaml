# auth engine for clients to authenticate with the pektin api, clients send tokens from this auth engine to vault these tokens should only have access to their own pektin-policy

# yaml-language-server: $schema=https://git.vindelicum.eu/firstdorsal/mows/-/raw/main/operators/vault-resource-controller/VaultResourceCRDSchema.json?ref_type=heads
apiVersion: vault.k8s.mows.cloud/v1
kind: VaultResource
metadata:
    name: pektin-kubernetes-api-clients
spec:
    authEngine:
        kubernetes:
            roles:
                pektin-zertificat:
                    serviceAccountName: pektin-zertificat
                    policyIds: ["pektin-api-client-zertificat-policy"]
                pektin-resource-controller:
                    serviceAccountName: pektin-resource-controller
                    policyIds: ["pektin-api-client-pektin-resource-controller-policy"]
---
# yaml-language-server: $schema=https://git.vindelicum.eu/firstdorsal/mows/-/raw/main/operators/vault-resource-controller/VaultResourceCRDSchema.json?ref_type=heads
apiVersion: vault.k8s.mows.cloud/v1
kind: VaultResource
metadata:
    name: pektin-api-client-zertificat-policy
spec:
    engineAccessPolicy:
        subPolicies:
            - engineId: pektin-policies
              engineType: secret
              subPath: "data/pektin-zertificat"
              capabilities: ["read"]
---
# yaml-language-server: $schema=https://git.vindelicum.eu/firstdorsal/mows/-/raw/main/operators/vault-resource-controller/VaultResourceCRDSchema.json?ref_type=heads
apiVersion: vault.k8s.mows.cloud/v1
kind: VaultResource
metadata:
    name: pektin-api-client-pektin-resource-controller-policy
spec:
    engineAccessPolicy:
        subPolicies:
            - engineId: pektin-policies
              engineType: secret
              subPath: "data/pektin-resource-controller"
              capabilities: ["read"]